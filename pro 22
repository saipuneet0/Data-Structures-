#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 50

// A structure to represent an adjacency list node
struct Node {
    int data;
    struct Node* next;
};

// A structure to represent the graph
struct Graph {
    int numVertices;
    struct Node** adjLists;
    int* visited;
};

// Function to create a new adjacency list node
struct Node* createNode(int v) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = v;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with a given number of vertices
struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = vertices;
    
    // Allocate memory for the adjacency lists and visited array
    graph->adjLists = (struct Node**)malloc(vertices * sizeof(struct Node*));
    graph->visited = (int*)malloc(vertices * sizeof(int));
    
    // Initialize adjacency lists and visited array
    int i;
    for (i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
        graph->visited[i] = 0;
    }
    
    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add edge from src to dest
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
    
    // Add edge from dest to src for an undirected graph
    newNode = createNode(src);
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}

// DFS traversal function
void dfs(struct Graph* graph, int startVertex) {
    // Mark the current vertex as visited and print it
    graph->visited[startVertex] = 1;
    printf("%d ", startVertex);
    
    // Recur for all the vertices adjacent to this vertex
    struct Node* temp = graph->adjLists[startVertex];
    while (temp) {
        int adjVertex = temp->data;
        if (graph->visited[adjVertex] == 0) {
            dfs(graph, adjVertex);
        }
        temp = temp->next;
    }
}

int main() {
    // Create a graph with 6 vertices
    struct Graph* graph = createGraph(6);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 2, 4);
    addEdge(graph, 3, 5);
    addEdge(graph, 4, 5);
    
    printf("Depth-First Search traversal starting from vertex 0:\n");
    dfs(graph, 0);
    printf("\n");
    
    return 0;
}
