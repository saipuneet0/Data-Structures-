#include <stdio.h>
#include <stdlib.h>

typedef struct QNode {
    int data;
    struct QNode* next;
} QNode;

typedef struct Queue {
    QNode *front, *rear;
} Queue;

Queue* createQueue() {
    Queue* q = (Queue*)malloc(sizeof(Queue));
    q->front = q->rear = NULL;
    return q;
}

void enqueue(Queue* q, int data) {
    QNode* newNode = (QNode*)malloc(sizeof(QNode));
    newNode->data = data;
    newNode->next = NULL;

    if (q->rear == NULL) {
        q->front = q->rear = newNode;
        return;
    }
    q->rear->next = newNode;
    q->rear = newNode;
}

int dequeue(Queue* q) {
    if (q->front == NULL) {
        return -1;
    }
    QNode* temp = q->front;
    int data = temp->data;
    q->front = q->front->next;
    if (q->front == NULL) {
        q->rear = NULL;
    }
    free(temp);
    return data;
}

int isEmpty(Queue* q) {
    return q->front == NULL;
}

typedef struct Stack {
    Queue* q1;
    Queue* q2;
} Stack;

Stack* createStack() {
    Stack* s = (Stack*)malloc(sizeof(Stack));
    s->q1 = createQueue();
    s->q2 = createQueue();
    return s;
}

void push(Stack* s, int data) {
    enqueue(s->q1, data);
}

int pop(Stack* s) {
    if (isEmpty(s->q1)) {
        return -1;
    }

    while (s->q1->front->next != NULL) {
        enqueue(s->q2, dequeue(s->q1));
    }

    int popped = dequeue(s->q1);
    
    Queue* temp = s->q1;
    s->q1 = s->q2;
    s->q2 = temp;

    return popped;
}

int main() {
    Stack* myStack = createStack();

    push(myStack, 10);
    push(myStack, 20);
    push(myStack, 30);

    printf("Popped: %d\n", pop(myStack));
    printf("Popped: %d\n", pop(myStack));

    push(myStack, 40);
    printf("Popped: %d\n", pop(myStack));

    return 0;
}
