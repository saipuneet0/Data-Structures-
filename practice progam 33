#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

int getLength(Node* head) {
    int count = 0;
    Node* current = head;
    while (current != NULL) {
        count++;
        current = current->next;
    }
    return count;
}

Node* getIntersectionNode(Node* head1, Node* head2) {
    int len1 = getLength(head1);
    int len2 = getLength(head2);
    int diff;

    if (len1 > len2) {
        diff = len1 - len2;
        for (int i = 0; i < diff; i++) {
            head1 = head1->next;
        }
    } else {
        diff = len2 - len1;
        for (int i = 0; i < diff; i++) {
            head2 = head2->next;
        }
    }

    while (head1 != NULL && head2 != NULL) {
        if (head1 == head2) {
            return head1;
        }
        head1 = head1->next;
        head2 = head2->next;
    }

    return NULL;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    Node* list1 = createNode(1);
    list1->next = createNode(2);
    list1->next->next = createNode(3);

    Node* list2 = createNode(10);
    list2->next = createNode(20);

    Node* common_tail = createNode(40);
    common_tail->next = createNode(50);
    list1->next->next->next = common_tail;
    list2->next->next = common_tail;

    printf("List 1: ");
    printList(list1);
    printf("List 2: ");
    printList(list2);

    Node* intersectionNode = getIntersectionNode(list1, list2);

    if (intersectionNode != NULL) {
        printf("Intersection point found with value: %d\n", intersectionNode->data);
    } else {
        printf("No intersection point found.\n");
    }

    return 0;
}
