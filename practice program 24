#include <stdio.h>

// Function to perform Heap Sort
void heapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        int temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (int i = n - 1; i > 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
        heapify(arr, i, 0);
    }
}

// Function to perform Merge Sort
void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

// Function to perform Insertion Sort
void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

// Function to perform Quick Sort
void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int arr_heap[] = {12, 11, 13, 5, 6, 7};
    int n_heap = sizeof(arr_heap) / sizeof(arr_heap[0]);
    printf("Original array for Heap Sort:\n");
    printArray(arr_heap, n_heap);
    heapSort(arr_heap, n_heap);
    printf("Sorted array with Heap Sort:\n");
    printArray(arr_heap, n_heap);
    printf("\n");

    int arr_merge[] = {12, 11, 13, 5, 6, 7};
    int n_merge = sizeof(arr_merge) / sizeof(arr_merge[0]);
    printf("Original array for Merge Sort:\n");
    printArray(arr_merge, n_merge);
    mergeSort(arr_merge, 0, n_merge - 1);
    printf("Sorted array with Merge Sort:\n");
    printArray(arr_merge, n_merge);
    printf("\n");

    int arr_insertion[] = {12, 11, 13, 5, 6, 7};
    int n_insertion = sizeof(arr_insertion) / sizeof(arr_insertion[0]);
    printf("Original array for Insertion Sort:\n");
    printArray(arr_insertion, n_insertion);
    insertionSort(arr_insertion, n_insertion);
    printf("Sorted array with Insertion Sort:\n");
    printArray(arr_insertion, n_insertion);
    printf("\n");

    int arr_quick[] = {12, 11, 13, 5, 6, 7};
    int n_quick = sizeof(arr_quick) / sizeof(arr_quick[0]);
    printf("Original array for Quick Sort:\n");
    printArray(arr_quick, n_quick);
    quickSort(arr_quick, 0, n_quick - 1);
    printf("Sorted array with Quick Sort:\n");
    printArray(arr_quick, n_quick);
    printf("\n");

    return 0;
}
