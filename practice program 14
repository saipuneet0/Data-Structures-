#include <stdio.h>
#include <limits.h>

#define V 4

int graph[V][V] = {
    {0, 10, 15, 20},
    {10, 0, 35, 25},
    {15, 35, 0, 30},
    {20, 25, 30, 0}
};

int min_cost = INT_MAX;
int path[V + 1];

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void find_permutations(int arr[], int start, int end) {
    if (start == end) {
        int current_cost = 0;
        int current_path[V + 1];
        current_path[0] = 0;

        for (int i = 0; i < V; i++) {
            current_path[i + 1] = arr[i];
            current_cost += graph[current_path[i]][current_path[i + 1]];
        }
        current_cost += graph[current_path[V]][0];

        if (current_cost < min_cost) {
            min_cost = current_cost;
            for (int i = 0; i <= V; i++) {
                path[i] = current_path[i];
            }
        }
        return;
    }

    for (int i = start; i <= end; i++) {
        swap(&arr[start], &arr[i]);
        find_permutations(arr, start + 1, end);
        swap(&arr[start], &arr[i]);
    }
}

int main() {
    int vertices[V - 1];
    for (int i = 0; i < V - 1; i++) {
        vertices[i] = i + 1;
    }

    find_permutations(vertices, 0, V - 2);

    printf("Minimum cost: %d\n", min_cost);
    printf("Path: ");
    for (int i = 0; i < V; i++) {
        printf("%d -> ", path[i]);
    }
    printf("%d\n", path[V]);

    return 0;
}
