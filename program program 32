#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

Node* insert(Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }
    return root;
}

void findKthSmallest(Node* root, int k, int* count, int* result) {
    if (root == NULL || *result != -1) {
        return;
    }
    
    findKthSmallest(root->left, k, count, result);
    
    if (*result == -1) {
        (*count)++;
        if (*count == k) {
            *result = root->data;
            return;
        }
    }

    if (*result == -1) {
        findKthSmallest(root->right, k, count, result);
    }
}

int main() {
    Node* root = NULL;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    int k = 3;
    int count = 0;
    int result = -1;

    findKthSmallest(root, k, &count, &result);
    
    if (result != -1) {
        printf("The %dth smallest element is: %d\n", k, result);
    } else {
        printf("The tree has fewer than %d elements.\n", k);
    }

    return 0;
}
