#include <stdio.h>

#define V 5

void create_graph_matrix(int graph[V][V]) {
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            graph[i][j] = 0;
        }
    }
    graph[0][1] = 1;
    graph[1][0] = 1;
    graph[0][4] = 1;
    graph[4][0] = 1;
    graph[1][2] = 1;
    graph[2][1] = 1;
    graph[1][3] = 1;
    graph[3][1] = 1;
    graph[1][4] = 1;
    graph[4][1] = 1;
    graph[2][3] = 1;
    graph[3][2] = 1;
    graph[3][4] = 1;
    graph[4][3] = 1;
}

void print_graph_matrix(int graph[V][V]) {
    printf("Graph as an Adjacency Matrix:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            printf("%d ", graph[i][j]);
        }
        printf("\n");
    }
}

int count_edges(int graph[V][V]) {
    int edge_count = 0;
    for (int i = 0; i < V; i++) {
        for (int j = i; j < V; j++) {
            if (graph[i][j] == 1) {
                edge_count++;
            }
        }
    }
    return edge_count;
}

int main() {
    int graph[V][V];
    create_graph_matrix(graph);

    print_graph_matrix(graph);

    int edges = count_edges(graph);
    printf("\nTotal number of edges: %d\n", edges);
    
    int min_edges = V - 1;
    printf("Minimum number of edges for a connected graph: %d\n", min_edges);

    return 0;
}
